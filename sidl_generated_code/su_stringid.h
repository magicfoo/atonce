/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


#ifndef _su_stringid_h_
#define _su_stringid_h_




namespace su { namespace sid
{

	const StringId none = 62;


	// -- Controller

	struct Controller : public StringEnum
	{
								Controller ( ) { v=FIRST; }
								Controller ( const Controller& inref ) { v=inref.v; }
								Controller ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								Controller ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		Controller&             operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const Controller& inref ) const { return (inref.v==v); }
		
		static const StringId	none = 62;
		static const StringId	Keyboard = 27;
		static const StringId	Mouse = 38;
		static const StringId	Pad1 = 41;
		static const StringId	Pad2 = 81;
		static const StringId	Pad3 = 71;
		static const StringId	Pad4 = 18;
		static const StringId	Nunchuk1 = 52;
		static const StringId	Nunchuk2 = 97;
		static const StringId	Nunchuk3 = 65;
		static const StringId	Nunchuk4 = 7;
		
		static const uint		COUNT = 11;
		static const StringId	FIRST = 62;
		static const StringId	LAST = 7;
		static const StringId	TYPE = 29;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


	// -- IOSKeys

	struct IOSKeys : public StringEnum
	{
								IOSKeys ( ) { v=FIRST; }
								IOSKeys ( const IOSKeys& inref ) { v=inref.v; }
								IOSKeys ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								IOSKeys ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		IOSKeys&                operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const IOSKeys& inref ) const { return (inref.v==v); }
		
		static const StringId	none = 62;
		static const StringId	Touch = 4;
		static const StringId	Home = 28;
		static const StringId	Mute = 101;
		static const StringId	Audio = 100;
		static const StringId	USB = 66;
		
		static const uint		COUNT = 6;
		static const StringId	FIRST = 62;
		static const StringId	LAST = 66;
		static const StringId	TYPE = 45;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


	// -- Inputevent

	struct Inputevent : public StringEnum
	{
								Inputevent ( ) { v=FIRST; }
								Inputevent ( const Inputevent& inref ) { v=inref.v; }
								Inputevent ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								Inputevent ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		Inputevent&             operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const Inputevent& inref ) const { return (inref.v==v); }
		
		static const StringId	Down = 15;
		static const StringId	Up = 98;
		static const StringId	UpOrDown = 96;
		static const StringId	Analog = 37;
		static const StringId	Character = 86;
		static const StringId	ClickDouble = 68;
		static const StringId	ErrorDetect = 95;
		static const StringId	Removed = 55;
		static const StringId	Plugged = 72;
		
		static const uint		COUNT = 9;
		static const StringId	FIRST = 15;
		static const StringId	LAST = 72;
		static const StringId	TYPE = 17;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


	// -- KeyModifier

	struct KeyModifier : public StringEnum
	{
								KeyModifier ( ) { v=FIRST; }
								KeyModifier ( const KeyModifier& inref ) { v=inref.v; }
								KeyModifier ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								KeyModifier ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		KeyModifier&            operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const KeyModifier& inref ) const { return (inref.v==v); }
		
		static const StringId	None = 30;
		static const StringId	Shift = 33;
		static const StringId	Ctrl = 22;
		static const StringId	Alt = 75;
		static const StringId	CtrlShift = 59;
		static const StringId	AltShift = 3;
		static const StringId	AltCtrl = 91;
		static const StringId	CtrlAltShift = 12;
		
		static const uint		COUNT = 8;
		static const StringId	FIRST = 30;
		static const StringId	LAST = 12;
		static const StringId	TYPE = 19;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


	// -- map_rsc_collection

	struct map_rsc_collection : public StringEnum
	{
								map_rsc_collection ( ) { v=FIRST; }
								map_rsc_collection ( const map_rsc_collection& inref ) { v=inref.v; }
								map_rsc_collection ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								map_rsc_collection ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		map_rsc_collection&     operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const map_rsc_collection& inref ) const { return (inref.v==v); }
		
		static const StringId	map_rsc_common_end = 92;
		static const StringId	map_rsc_collection_anim_skelframe = 63;
		static const StringId	map_rsc_collection_bitmap_dxmip = 79;
		static const StringId	map_rsc_collection_litem_character = 5;
		static const StringId	map_rsc_collection_hotpoint = 87;
		static const StringId	map_rsc_collection_hotspline = 23;
		static const StringId	map_rsc_collection_litem_light = 47;
		static const StringId	map_rsc_collection_litem_camera = 69;
		static const StringId	map_rsc_collection_litem_bone = 44;
		static const StringId	map_rsc_collection_hotsphere = 36;
		static const StringId	map_rsc_collection_shading_technique = 31;
		static const StringId	map_rsc_collection_bitmap_s3mip = 102;
		static const StringId	map_rsc_collection_skeleton = 104;
		static const StringId	map_rsc_collection_mesh_blendprocess = 26;
		static const StringId	map_rsc_collection_bitmap_drivermip = 24;
		static const StringId	map_rsc_collection_litem_geometry = 94;
		static const StringId	map_rsc_collection_anim_klin_scl = 84;
		static const StringId	map_rsc_collection_anim = 16;
		static const StringId	map_rsc_collection_bitmap_glmip = 39;
		static const StringId	map_rsc_collection_anim_klin_rot = 49;
		static const StringId	map_rsc_collection_shading_pass = 6;
		static const StringId	map_rsc_collection_skeleton_bone = 2;
		static const StringId	map_rsc_collection_anim_morphframe = 103;
		static const StringId	map_rsc_collection_bitmap_pvrmip = 48;
		static const StringId	map_rsc_collection_sourcefile = 83;
		static const StringId	map_rsc_collection_hotbox = 50;
		static const StringId	map_rsc_collection_mesh_blendpass = 77;
		static const StringId	map_rsc_collection_list = 11;
		static const StringId	map_rsc_collection_hotsegment = 35;
		static const StringId	map_rsc_collection_hotcloud = 40;
		static const StringId	map_rsc_collection_mesh = 70;
		static const StringId	map_rsc_collection_litem_helper = 13;
		static const StringId	map_rsc_collection_litem_export = 85;
		static const StringId	map_rsc_collection_mesh_surface = 61;
		static const StringId	map_rsc_collection_anim_klin_float = 54;
		static const StringId	map_rsc_collection_shading_effect = 51;
		static const StringId	map_rsc_collection_define = 76;
		static const StringId	map_rsc_collection_anim_note = 20;
		static const StringId	map_rsc_collection_bitmap = 80;
		static const StringId	map_rsc_collection_shading_ps = 43;
		static const StringId	map_rsc_collection_shading_gs = 42;
		static const StringId	map_rsc_collection_morph_target = 9;
		static const StringId	map_rsc_collection_anim_klin_loc = 93;
		static const StringId	map_rsc_collection_shading_vs = 21;
		static const StringId	map_rsc_collection_shading_constant = 1;
		static const StringId	map_rsc_collection_shading_rstate = 32;
		static const StringId	map_rsc_collection_bitmap_layer = 56;
		static const StringId	map_rsc_collection_mesh_vbo = 82;
		static const StringId	map_rsc_collection_litem_node = 88;
		
		static const uint		COUNT = 49;
		static const StringId	FIRST = 92;
		static const StringId	LAST = 88;
		static const StringId	TYPE = 14;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


	// -- map_rsc_userdata

	struct map_rsc_userdata : public StringEnum
	{
								map_rsc_userdata ( ) { v=FIRST; }
								map_rsc_userdata ( const map_rsc_userdata& inref ) { v=inref.v; }
								map_rsc_userdata ( StringId inref ) { v=inref; SU_ASSERT(has(v)); }
								map_rsc_userdata ( pcstr inref ) { v=find(inref); SU_ASSERT(has(v)); }
		map_rsc_userdata&       operator = ( StringId inref ) { v=inref; SU_ASSERT(has(v)); return *this; };
		bool					operator == ( const map_rsc_userdata& inref ) const { return (inref.v==v); }
		
		static const StringId	map_rsc_common_end = 92;
		static const StringId	map_rsc_userdata_content = 74;
		
		static const uint		COUNT = 2;
		static const StringId	FIRST = 92;
		static const StringId	LAST = 74;
		static const StringId	TYPE = 89;
		static StringId			NEXT( StringId );
		static StringId			FIND( pcstr );
		static bool				HAS( StringId );
		static bool				HAS( pcstr inref ) { return FIND(inref)!=sid::null; }
		
		virtual StringId		type ( ) const { return TYPE; }
		virtual StringId		first ( ) const { return FIRST; }
		virtual StringId		last ( ) const { return LAST; }
		virtual StringId		next ( StringId inref ) const { return NEXT(inref); }
		virtual StringId		find ( pcstr inref ) const { return FIND(inref); }
		virtual bool			has ( StringId inref ) const { return HAS(inref); }
		virtual bool			has ( pcstr inref ) const { return HAS(inref); }
		
		virtual StringId		value ( ) const { return v; }
	protected:
		StringId v;
	};


} }




#endif // _su_stringid_h_


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


