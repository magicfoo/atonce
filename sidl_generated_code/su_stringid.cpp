/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


#include <sufw/su_core.h>
#include "su_stringid.h"
using namespace su;
using namespace su::sid;


#define LAST_ID	104

namespace
{

	struct sid_def { uint32 hash; pcstr str; };

	const sid_def sid_list[] = {
		{ 0, NULL },
		{ 0x0012c83cu, "rsc.collection.shading.constant" }, // -- 1
		{ 0x00ca46c7u, "rsc.collection.skeleton.bone" }, // -- 2
		{ 0x00dc461eu, "AltShift" }, // -- 3
		{ 0x01e2ef42u, "Touch" }, // -- 4
		{ 0x026f7edbu, "rsc.collection.litem.character" }, // -- 5
		{ 0x034aa89du, "rsc.collection.shading.pass" }, // -- 6
		{ 0x04377ed1u, "Nunchuk4" }, // -- 7
		{ 0x078c9454u, "rscs" }, // -- 8
		{ 0x07a9e2f5u, "rsc.collection.morph.target" }, // -- 9
		{ 0x08cb8649u, "matrix" }, // -- 10
		{ 0x08cd2fc9u, "rsc.collection.list" }, // -- 11
		{ 0x14f632d8u, "CtrlAltShift" }, // -- 12
		{ 0x16484988u, "rsc.collection.litem.helper" }, // -- 13
		{ 0x24d1fce2u, "rsc.collection" }, // -- 14
		{ 0x2a6a7d8fu, "Down" }, // -- 15
		{ 0x2baeb38au, "rsc.collection.anim" }, // -- 16
		{ 0x2e79dcb4u, "Inputevent" }, // -- 17
		{ 0x2eb049fdu, "Pad4" }, // -- 18
		{ 0x30228e56u, "KeyModifier" }, // -- 19
		{ 0x31b86a80u, "rsc.collection.anim.note" }, // -- 20
		{ 0x331919a9u, "rsc.collection.shading.vs" }, // -- 21
		{ 0x34b79cceu, "Ctrl" }, // -- 22
		{ 0x362f52ecu, "rsc.collection.hotspline" }, // -- 23
		{ 0x3da84bbcu, "rsc.collection.bitmap.drivermip" }, // -- 24
		{ 0x4393283au, "vec4" }, // -- 25
		{ 0x44382c80u, "rsc.collection.mesh.blendprocess" }, // -- 26
		{ 0x45471cd9u, "Keyboard" }, // -- 27
		{ 0x4743e164u, "Home" }, // -- 28
		{ 0x476d7ba5u, "Controller" }, // -- 29
		{ 0x4905ed7bu, "None" }, // -- 30
		{ 0x4bf9e6f5u, "rsc.collection.shading.technique" }, // -- 31
		{ 0x50c7c939u, "rsc.collection.shading.rstate" }, // -- 32
		{ 0x525ff9f5u, "Shift" }, // -- 33
		{ 0x53245455u, "locations" }, // -- 34
		{ 0x5386f825u, "rsc.collection.hotsegment" }, // -- 35
		{ 0x56206182u, "rsc.collection.hotsphere" }, // -- 36
		{ 0x57745247u, "Analog" }, // -- 37
		{ 0x5861745du, "Mouse" }, // -- 38
		{ 0x5d712793u, "rsc.collection.bitmap.glmip" }, // -- 39
		{ 0x5db91f76u, "rsc.collection.hotcloud" }, // -- 40
		{ 0x5edabd72u, "Pad1" }, // -- 41
		{ 0x60c03ab9u, "rsc.collection.shading.gs" }, // -- 42
		{ 0x6543be2fu, "rsc.collection.shading.ps" }, // -- 43
		{ 0x6a4caa02u, "rsc.collection.litem.bone" }, // -- 44
		{ 0x6e1d9432u, "IOSKeys" }, // -- 45
		{ 0x6e46752fu, "string" }, // -- 46
		{ 0x7044f399u, "rsc.collection.litem.light" }, // -- 47
		{ 0x70c2f6adu, "rsc.collection.bitmap.pvrmip" }, // -- 48
		{ 0x713dd302u, "rsc.collection.anim.klin.rot" }, // -- 49
		{ 0x73cc91adu, "rsc.collection.hotbox" }, // -- 50
		{ 0x743e7044u, "rsc.collection.shading.effect" }, // -- 51
		{ 0x745d8a5eu, "Nunchuk1" }, // -- 52
		{ 0x7e05a023u, "element" }, // -- 53
		{ 0x7ef7bbbau, "rsc.collection.anim.klin.float" }, // -- 54
		{ 0x81290467u, "Removed" }, // -- 55
		{ 0x815febd3u, "rsc.collection.bitmap.layer" }, // -- 56
		{ 0x82799b11u, "elements" }, // -- 57
		{ 0x86ea4878u, "blob" }, // -- 58
		{ 0x88d7ea31u, "CtrlShift" }, // -- 59
		{ 0x8bdf94efu, "strings" }, // -- 60
		{ 0x8de72c08u, "rsc.collection.mesh.surface" }, // -- 61
		{ 0x926359ddu, "unknown" }, // -- 62
		{ 0x95a29cfcu, "rsc.collection.anim.skelframe" }, // -- 63
		{ 0x98ad1587u, "location" }, // -- 64
		{ 0x9a53eb72u, "Nunchuk3" }, // -- 65
		{ 0x9c721b62u, "USB" }, // -- 66
		{ 0xa62d331du, "box3" }, // -- 67
		{ 0xa859ec37u, "ClickDouble" }, // -- 68
		{ 0xaa63dc3du, "rsc.collection.litem.camera" }, // -- 69
		{ 0xad6aed87u, "rsc.collection.mesh" }, // -- 70
		{ 0xb0d4dc5eu, "Pad3" }, // -- 71
		{ 0xb979796du, "Plugged" }, // -- 72
		{ 0xbde6b029u, "quat" }, // -- 73
		{ 0xbe384a37u, "rsc.userdata.content" }, // -- 74
		{ 0xbed3ab01u, "Alt" }, // -- 75
		{ 0xc2e6641au, "rsc.collection.define" }, // -- 76
		{ 0xc30cf4e8u, "rsc.collection.mesh.blendpass" }, // -- 77
		{ 0xc3827819u, "bitmask" }, // -- 78
		{ 0xc5aa9d8bu, "rsc.collection.bitmap.dxmip" }, // -- 79
		{ 0xc613a5eau, "rsc.collection.bitmap" }, // -- 80
		{ 0xc7d3ecc8u, "Pad2" }, // -- 81
		{ 0xcb75b59cu, "rsc.collection.mesh.vbo" }, // -- 82
		{ 0xcc110578u, "rsc.collection.sourcefile" }, // -- 83
		{ 0xcf266e6fu, "rsc.collection.anim.klin.scl" }, // -- 84
		{ 0xd3f324acu, "rsc.collection.litem.export" }, // -- 85
		{ 0xd7b8aedbu, "Character" }, // -- 86
		{ 0xd840fa86u, "rsc.collection.hotpoint" }, // -- 87
		{ 0xda75fd30u, "rsc.collection.litem.node" }, // -- 88
		{ 0xdde8947cu, "rsc.userdata" }, // -- 89
		{ 0xddf7bd99u, "vec3" }, // -- 90
		{ 0xdfea417du, "AltCtrl" }, // -- 91
		{ 0xe35171dcu, "rsc.common.end" }, // -- 92
		{ 0xe456d8bfu, "rsc.collection.anim.klin.loc" }, // -- 93
		{ 0xe4f076c5u, "rsc.collection.litem.geometry" }, // -- 94
		{ 0xe89cd2adu, "ErrorDetect" }, // -- 95
		{ 0xecc24dfdu, "UpOrDown" }, // -- 96
		{ 0xed54dbe4u, "Nunchuk2" }, // -- 97
		{ 0xed7eea1au, "Up" }, // -- 98
		{ 0xee3a3d71u, "rsc" }, // -- 99
		{ 0xef29f425u, "Audio" }, // -- 100
		{ 0xfa2c9ee8u, "Mute" }, // -- 101
		{ 0xfb4da61bu, "rsc.collection.bitmap.s3mip" }, // -- 102
		{ 0xfea4b3c9u, "rsc.collection.anim.morphframe" }, // -- 103
		{ 0xff7e4029u, "rsc.collection.skeleton" }, // -- 104
	};

	const short IOSKeys_ids[] = { 62, 4, 28, 101, 100, 66 };
	const short map_rsc_collection_ids[] = { 92, 63, 79, 5, 87, 23, 47, 69, 44, 36, 31, 102, 104, 26, 24, 94, 84, 16, 39, 49, 6, 2, 103, 48, 83, 50, 77, 11, 35, 40, 70, 13, 85, 61, 54, 51, 76, 20, 80, 43, 42, 9, 93, 21, 1, 32, 56, 82, 88 };
	const short Inputevent_ids[] = { 15, 98, 96, 37, 86, 68, 95, 55, 72 };
	const short Controller_ids[] = { 62, 27, 38, 41, 81, 71, 18, 52, 97, 65, 7 };
	const short KeyModifier_ids[] = { 30, 33, 22, 75, 59, 3, 91, 12 };
	const short map_rsc_userdata_ids[] = { 92, 74 };

	StringId enum_find( pcstr a, const short ids[], int n )
	{
		uint32 h = util::hmac_crc32_w(a);
		for( short i=0 ; i<n ; i++ )
			if( sid_list[ids[i]].hash==h )
				return ids[i];
		return 0;
	}
	
	StringId enum_getnext( StringId a, const short ids[], int n )
	{
		for( short i=1 ; i<n ; i++ )
			if( ids[i-1]==a )
				return ids[i];
		return 0;
	}
	
	bool enum_has( StringId a, const short ids[], int n )
	{
		for( short i=0 ; i<n ; i++ )
			if( ids[i]==a )
				return true;
		return false;
	}

}


int   su_sid_count() { return LAST_ID+1; }
void* su_sid_list()  { return (sid_def*)sid_list;  }


// -- Controller
StringId su::sid::Controller::NEXT( StringId inref ) { return enum_getnext(inref,Controller_ids,sizeof(Controller_ids)/sizeof(short)); }
bool su::sid::Controller::HAS( StringId inref ) { return enum_has(inref,Controller_ids,sizeof(Controller_ids)/sizeof(short)); }
StringId su::sid::Controller::FIND( pcstr inref ) { return enum_find(inref,Controller_ids,sizeof(Controller_ids)/sizeof(short)); }


// -- IOSKeys
StringId su::sid::IOSKeys::NEXT( StringId inref ) { return enum_getnext(inref,IOSKeys_ids,sizeof(IOSKeys_ids)/sizeof(short)); }
bool su::sid::IOSKeys::HAS( StringId inref ) { return enum_has(inref,IOSKeys_ids,sizeof(IOSKeys_ids)/sizeof(short)); }
StringId su::sid::IOSKeys::FIND( pcstr inref ) { return enum_find(inref,IOSKeys_ids,sizeof(IOSKeys_ids)/sizeof(short)); }


// -- Inputevent
StringId su::sid::Inputevent::NEXT( StringId inref ) { return enum_getnext(inref,Inputevent_ids,sizeof(Inputevent_ids)/sizeof(short)); }
bool su::sid::Inputevent::HAS( StringId inref ) { return enum_has(inref,Inputevent_ids,sizeof(Inputevent_ids)/sizeof(short)); }
StringId su::sid::Inputevent::FIND( pcstr inref ) { return enum_find(inref,Inputevent_ids,sizeof(Inputevent_ids)/sizeof(short)); }


// -- KeyModifier
StringId su::sid::KeyModifier::NEXT( StringId inref ) { return enum_getnext(inref,KeyModifier_ids,sizeof(KeyModifier_ids)/sizeof(short)); }
bool su::sid::KeyModifier::HAS( StringId inref ) { return enum_has(inref,KeyModifier_ids,sizeof(KeyModifier_ids)/sizeof(short)); }
StringId su::sid::KeyModifier::FIND( pcstr inref ) { return enum_find(inref,KeyModifier_ids,sizeof(KeyModifier_ids)/sizeof(short)); }


// -- map_rsc_collection
StringId su::sid::map_rsc_collection::NEXT( StringId inref ) { return enum_getnext(inref,map_rsc_collection_ids,sizeof(map_rsc_collection_ids)/sizeof(short)); }
bool su::sid::map_rsc_collection::HAS( StringId inref ) { return enum_has(inref,map_rsc_collection_ids,sizeof(map_rsc_collection_ids)/sizeof(short)); }
StringId su::sid::map_rsc_collection::FIND( pcstr inref ) { return enum_find(inref,map_rsc_collection_ids,sizeof(map_rsc_collection_ids)/sizeof(short)); }


// -- map_rsc_userdata
StringId su::sid::map_rsc_userdata::NEXT( StringId inref ) { return enum_getnext(inref,map_rsc_userdata_ids,sizeof(map_rsc_userdata_ids)/sizeof(short)); }
bool su::sid::map_rsc_userdata::HAS( StringId inref ) { return enum_has(inref,map_rsc_userdata_ids,sizeof(map_rsc_userdata_ids)/sizeof(short)); }
StringId su::sid::map_rsc_userdata::FIND( pcstr inref ) { return enum_find(inref,map_rsc_userdata_ids,sizeof(map_rsc_userdata_ids)/sizeof(short)); }


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


