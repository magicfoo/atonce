/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


#ifndef _su_iluautil_h_
#define _su_iluautil_h_




struct lua_State;


namespace su
{


	struct ILuaUtil : public IInterface
	{
		SU_DECL_INTERFACE( IInterface, 0x203c7114u )


		virtual int    Lua_hash32               ( lua_State* L ) = 0;

		virtual int    Lua_hash128              ( lua_State* L ) = 0;

		virtual int    Lua_sid                  ( lua_State* L ) = 0;

		virtual int    Lua_newBlob              ( lua_State* L ) = 0;

		virtual int    Lua_newArray             ( lua_State* L ) = 0;

		virtual int    Lua_setConsoleFile       ( lua_State* L ) = 0;

		virtual int    Lua_getTime              ( lua_State* L ) = 0;

		virtual int    Lua_getDate              ( lua_State* L ) = 0;

		virtual int    Lua_getNow               ( lua_State* L ) = 0;

		virtual int    Lua_selectMap            ( lua_State* L ) = 0;

		virtual int    Lua_binarizeMap          ( lua_State* L ) = 0;

		virtual int    Lua_listMaps             ( lua_State* L ) = 0;

		virtual int    Lua_listTags             ( lua_State* L ) = 0;

		virtual int    Lua_openPak              ( lua_State* L ) = 0;

		virtual int    LuaPak_getHeader         ( lua_State* L ) = 0;

		virtual int    LuaPak_getDesc           ( lua_State* L ) = 0;

		virtual int    LuaPak_enumDesc          ( lua_State* L ) = 0;

		virtual int    LuaPak_extractBytes      ( lua_State* L ) = 0;

		virtual int    LuaPak_extractRaw        ( lua_State* L ) = 0;

		virtual int    LuaPak_extractContent    ( lua_State* L ) = 0;

		virtual int    LuaPak_startUpdating     ( lua_State* L ) = 0;

		virtual int    LuaPak_updateLabel       ( lua_State* L ) = 0;

		virtual int    LuaPak_updateRevision    ( lua_State* L ) = 0;

		virtual int    LuaPak_updateContent     ( lua_State* L ) = 0;

		virtual int    LuaPak_endUpdating       ( lua_State* L ) = 0;

		virtual int    LuaPak_optimize          ( lua_State* L ) = 0;

		virtual int    LuaPak_gc                ( lua_State* L ) = 0;

		virtual int    Lua_openZip              ( lua_State* L ) = 0;

		virtual int    LuaZip_len               ( lua_State* L ) = 0;

		virtual int    LuaZip_comment           ( lua_State* L ) = 0;

		virtual int    LuaZip_tell              ( lua_State* L ) = 0;

		virtual int    LuaZip_eof               ( lua_State* L ) = 0;

		virtual int    LuaZip_firstFile         ( lua_State* L ) = 0;

		virtual int    LuaZip_nextFile          ( lua_State* L ) = 0;

		virtual int    LuaZip_seekFile          ( lua_State* L ) = 0;

		virtual int    LuaZip_aboutCurrent      ( lua_State* L ) = 0;

		virtual int    LuaZip_openCurrent       ( lua_State* L ) = 0;

		virtual int    LuaZip_closeCurrent      ( lua_State* L ) = 0;

		virtual int    LuaZip_readCurrent       ( lua_State* L ) = 0;

		virtual int    LuaZip_gc                ( lua_State* L ) = 0;

		virtual int    Lua_newVector            ( lua_State* L ) = 0;

		virtual int    Lua_vcpy                 ( lua_State* L ) = 0;

		virtual int    Lua_veq                  ( lua_State* L ) = 0;

		virtual int    Lua_vlen                 ( lua_State* L ) = 0;

		virtual int    Lua_vstr                 ( lua_State* L ) = 0;

		virtual int    Lua_vlb                  ( lua_State* L ) = 0;

		virtual int    Lua_vlh                  ( lua_State* L ) = 0;

		virtual int    Lua_vlw                  ( lua_State* L ) = 0;

		virtual int    Lua_vld                  ( lua_State* L ) = 0;

		virtual int    Lua_vlq                  ( lua_State* L ) = 0;

		virtual int    Lua_vlf                  ( lua_State* L ) = 0;

		virtual int    Lua_vsb                  ( lua_State* L ) = 0;

		virtual int    Lua_vsh                  ( lua_State* L ) = 0;

		virtual int    Lua_vsw                  ( lua_State* L ) = 0;

		virtual int    Lua_vsd                  ( lua_State* L ) = 0;

		virtual int    Lua_vsq                  ( lua_State* L ) = 0;

		virtual int    Lua_vsf                  ( lua_State* L ) = 0;

		virtual int    Lua_newCursor            ( lua_State* L ) = 0;

		virtual int    LuaCurs_size             ( lua_State* L ) = 0;

		virtual int    LuaCurs_pos              ( lua_State* L ) = 0;

		virtual int    LuaCurs_seek             ( lua_State* L ) = 0;

		virtual int    LuaCurs_backward         ( lua_State* L ) = 0;

		virtual int    LuaCurs_hasbackward      ( lua_State* L ) = 0;

		virtual int    LuaCurs_gobackward       ( lua_State* L ) = 0;

		virtual int    LuaCurs_forward          ( lua_State* L ) = 0;

		virtual int    LuaCurs_hasforward       ( lua_State* L ) = 0;

		virtual int    LuaCurs_goforward        ( lua_State* L ) = 0;

		virtual int    LuaCurs_align            ( lua_State* L ) = 0;

		virtual int    LuaCurs_uread            ( lua_State* L ) = 0;

		virtual int    LuaCurs_sread            ( lua_State* L ) = 0;

		virtual int    LuaCurs_sizeB            ( lua_State* L ) = 0;

		virtual int    LuaCurs_seekB            ( lua_State* L ) = 0;

		virtual int    LuaCurs_usedB            ( lua_State* L ) = 0;

		virtual int    LuaCurs_leftB            ( lua_State* L ) = 0;

		virtual int    LuaCurs_findB            ( lua_State* L ) = 0;

		virtual int    LuaCurs_writeu8          ( lua_State* L ) = 0;

		virtual int    LuaCurs_writes8          ( lua_State* L ) = 0;

		virtual int    LuaCurs_writeu16         ( lua_State* L ) = 0;

		virtual int    LuaCurs_writes16         ( lua_State* L ) = 0;

		virtual int    LuaCurs_writeu32         ( lua_State* L ) = 0;

		virtual int    LuaCurs_writes32         ( lua_State* L ) = 0;

		virtual int    LuaCurs_writef32         ( lua_State* L ) = 0;

		virtual int    LuaCurs_gc               ( lua_State* L ) = 0;
	};


}




#endif // _su_iluautil_h_


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.

