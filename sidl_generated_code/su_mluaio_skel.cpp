/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


//==== includes ====================================================================================

#include <sufw/precompiled/supch_core.h>
#include "..\..\core\base\su_iinterface.h"
#include "su_iluaio.h"
#include "..\..\core\base\su_iswitch.h"
#include <stdarg.h>




//==== defines =====================================================================================

#ifndef SIDL_IMPL_CLASSNAME
#define SIDL_IMPL_CLASSNAME MLuaIO
#endif

#ifndef SIDL_IMPL_MUID
#define SIDL_IMPL_MUID 0xd554bd73u
#endif

#ifndef SIDL_IMPL_QUALIFIER
#define SIDL_IMPL_QUALIFIER static
#endif

#ifndef SIDL_IMPL_IS_STATIC
#define SIDL_IMPL_IS_STATIC 
#endif

#ifndef SIDL_IMPL_SWITCHED
#define SIDL_IMPL_SWITCHED 
#endif

#ifndef SIDL_IMPL_REVISION
#define SIDL_IMPL_REVISION 0
#endif

#ifndef SIDL_IMPL_PACKAGE
#define SIDL_IMPL_PACKAGE "su.fw.lang"
#endif

#ifndef SIDL_IMPL_ATTR_V
#define SIDL_IMPL_ATTR_V NULL
#endif

#ifndef SIDL_IMPL_ATTR_C
#define SIDL_IMPL_ATTR_C 0
#endif

#ifndef SIDL_STUB_CLASSNAME
#define SIDL_STUB_CLASSNAME MLuaIO_Stub
#endif

#ifndef SIDL_IMPL_INTERFACE
#define SIDL_IMPL_INTERFACE(I) ((I*)MLuaIO_get_interface(MLuaIO_stub_to_base(this),I::ClassId))
#endif


//==== declarations ================================================================================

namespace {

su::IInterface* MLuaIO_create_object( su::Pool*, su::Pool*, su::AnyList* );
void* MLuaIO_base_to_stub ( void* );
void* MLuaIO_stub_to_base ( void* );
su::addin::Builder* MLuaIO_builder ( );
uint MLuaIO_count_interface ( );
bool MLuaIO_enum_interface ( uint, su::classid*, pcstr* );
su::IInterface* MLuaIO_first_interface ( void* );
su::IInterface* MLuaIO_get_interface ( void*, su::classid );
uint MLuaIO_count_switch ( );
bool MLuaIO_enum_switch ( uint, su::ISwitch::Desc& );
int MLuaIO_find_switch ( pcstr );
bool MLuaIO_call_switch_stack ( void*, uint, void*, va_list );
bool MLuaIO_call_switch_mem ( void*, uint, su::Any*, int, su::Any* );

}


//==== stub area ===================================================================================

#undef  SIDL_PROPER
#undef  SIDL_STUB
#undef  SIDL_BUILDER
#undef  SIDL_CODE
#define SIDL_STUB
#include "su_mluaio_stub.h"




//==== skeleton ====================================================================================

namespace {


struct MLuaIO
{

//---- bridges -------------------------------------------------------------------------------------

struct ILuaIO_t : public su::ILuaIO {
	// from IInterface
	::su::classbase         GetBase            (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder         (  ) { return MLuaIO_builder(); }
	void                    Retain             (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); (*m).Retain(); }
	::uint                  CountRef           (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (*m).CountRef(); }
	void                    Release            (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); (*m).Release(); }
	::uint                  CountInterface     (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface      ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface       ( ::su::classid p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (*m).GetInterface(p0); }
	// from ILuaIO
	int                     Lua_isExists       ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isExists(p0); }
	int                     Lua_isEmpty        ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isEmpty(p0); }
	int                     Lua_isDirectory    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isDirectory(p0); }
	int                     Lua_isFile         ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isFile(p0); }
	int                     Lua_isReadOnly     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isReadOnly(p0); }
	int                     Lua_isHidden       ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isHidden(p0); }
	int                     Lua_isSystem       ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isSystem(p0); }
	int                     Lua_isFullname     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_isFullname(p0); }
	int                     Lua_findFile       ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_findFile(p0); }
	int                     Lua_listDirectory  ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_listDirectory(p0); }
	int                     Lua_splitExtension ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_splitExtension(p0); }
	int                     Lua_hasExtension   ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_hasExtension(p0); }
	int                     Lua_getExtension   ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getExtension(p0); }
	int                     Lua_getSize        ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getSize(p0); }
	int                     Lua_glob           ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_glob(p0); }
	int                     Lua_getDirname     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getDirname(p0); }
	int                     Lua_getBasename    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getBasename(p0); }
	int                     Lua_getFullname    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getFullname(p0); }
	int                     Lua_getNormalized  ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getNormalized(p0); }
	int                     Lua_getHostPath    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getHostPath(p0); }
	int                     Lua_getVirtualPath ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_getVirtualPath(p0); }
	int                     Lua_hashContent    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_hashContent(p0); }
	int                     Lua_removeFile     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_removeFile(p0); }
	int                     Lua_removeDir      ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_removeDir(p0); }
	int                     Lua_parseStream    ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_parseStream(p0); }
	int                     Lua_loadStream     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_loadStream(p0); }
	int                     Lua_presentStream  ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_presentStream(p0); }
	int                     Lua_dumpStream     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_dumpStream(p0); }
	int                     Lua_loadBinary     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_loadBinary(p0); }
	int                     Lua_dumpBinary     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_dumpBinary(p0); }
	int                     Lua_mount          ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_mount(p0); }
	int                     Lua_unmount        ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_unmount(p0); }
	int                     Lua_unmountAll     ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_unmountAll(p0); }
	int                     Lua_listMount      ( lua_State* p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ILuaIO_i,this); return (m->stub).Lua_listMount(p0); }
} ILuaIO_i;


struct ISwitch_t : public su::ISwitch {
	// from IInterface
	::su::classbase         GetBase        (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder     (  ) { return MLuaIO_builder(); }
	void                    Retain         (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); (*m).Retain(); }
	::uint                  CountRef       (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return (*m).CountRef(); }
	void                    Release        (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); (*m).Release(); }
	::uint                  CountInterface (  ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface  ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface   ( ::su::classid p0 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return (*m).GetInterface(p0); }
	// from ISwitch
	::uint                  CountSwitch    (  ) { return MLuaIO_count_switch(); }
	bool                    EnumSwitch     ( ::uint p0,::su::ISwitch::Desc & p1 ) { return MLuaIO_enum_switch(p0,p1); }
	int                     FindSwitch     ( ::pcstr p0 ) { return MLuaIO_find_switch(p0); }
	bool                    CallSwitch     ( ::uint p0,void * p1,... ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); va_list vl; va_start(vl,p1); return MLuaIO_call_switch_stack(m,p0,p1,vl); va_end(vl); }
	bool                    CallSwitchMem  ( ::uint p0,::su::Any * p1,int p2,::su::Any * p3 ) { MLuaIO* m = SU_DELEGATE_BASEPTR(MLuaIO,ISwitch_i,this); return MLuaIO_call_switch_mem(m,p0,p1,p2,p3); }
} ISwitch_i;


//---- stub nested object --------------------------------------------------------------------------

MLuaIO_Stub stub;


//---- skeleton management code area ---------------------------------------------------------------

int refcount;


void Retain ( )
{
	refcount++;
}


uint CountRef ( )
{
	return refcount;
}


void Release ( )
{
	if( refcount==1 )
		Destroy( this );
	else
		refcount--;
}


uint CountInterface ( )
{
	return MLuaIO_count_interface();
}


bool EnumInterface ( uint i, su::classid* cid, pcstr* cname )
{
	return MLuaIO_enum_interface(i,cid,cname);
}


su::IInterface* GetInterface ( classid cid )
{
	SU_IMPLEMENTS_MEMBER( ILuaIO_i, cid );
	SU_IMPLEMENTS_MEMBER( ISwitch_i, cid );
	return NULL;
}


static MLuaIO* Create( Pool* np, Pool* dp, AnyList* o )
{
	static MLuaIO m;
	static bool yet = false;
	if( !yet )
	{
		m.refcount = 0;
		yet = true;
	}
	if( m.refcount==0 )
	{
		if( !m.stub.Init(dp,o) )
			return NULL;
	}
	m.refcount += 1;
	return &m;
}


static void Destroy( MLuaIO* m )
{
	m->stub.Shut();
	m->refcount=0;
}

};

}




//==== builder =====================================================================================


SU_BEGIN_BUILDER( MLuaIO )

su::classid GetMUID ( ) { return SIDL_IMPL_MUID; }
pcstr GetMClassname ( ) { return "MLuaIO"; }
uint32 GetRevision ( ) { return SIDL_IMPL_REVISION; }
pcstr GetPackage ( ) { return SIDL_IMPL_PACKAGE; }
uint CountInterface ( ) { return MLuaIO_count_interface(); }
bool EnumInterface ( uint i, su::classid* cid, pcstr* cname ) { return MLuaIO_enum_interface(i,cid,cname); }
su::IInterface* FirstInterface ( void* base ) { return MLuaIO_first_interface(base); }
su::IInterface* GetInterface ( void* base, su::classid cid ) { return MLuaIO_get_interface(base,cid); }
su::IInterface* CreateObject( su::Pool* nestp, su::Pool* datap, su::AnyList* opts ) { return MLuaIO_create_object(nestp,datap,opts); }
void* BaseToStub ( void* base ) { return MLuaIO_base_to_stub(base); }
void* StubToBase ( void* base ) { return MLuaIO_stub_to_base(base); }
uint CountSwitch ( ) { return MLuaIO_count_switch(); }
bool EnumSwitch ( uint i, su::ISwitch::Desc& desc ) { return MLuaIO_enum_switch(i,desc); }

SU_END_BUILDER( MLuaIO )




//==== definitions =================================================================================


namespace {


su::IInterface* MLuaIO_create_object( su::Pool* nestp, su::Pool* datap, su::AnyList* opts )
{
	MLuaIO* m = MLuaIO::Create( nestp, datap, opts );
	SU_REQUIRE_OR_NULL( m );
	return &m->ILuaIO_i;
}


void* MLuaIO_base_to_stub ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaIO*)base)->stub);
}


void* MLuaIO_stub_to_base ( void* stubp )
{
	SU_REQUIRE_OR_NULL( stubp );
	return SU_DELEGATE_BASEPTR(MLuaIO,stub,stubp);
}


su::addin::Builder* MLuaIO_builder ( )
{
	return &_builder_MLuaIO;
}


uint MLuaIO_count_interface ( )
{
	return 2;
}


bool MLuaIO_enum_interface ( uint i, su::classid* cid, pcstr* cname )
{
	static const su::classid cids[] = { su::ILuaIO::ClassId, su::ISwitch::ClassId };
	static const pcstr cnames[] = { "ILuaIO", "ISwitch" };
	SU_REQUIRE_OR_FALSE( i<2 );
	if( cid )   *cid   = cids[i];
	if( cname ) *cname = cnames[i];
	return true;
}


su::IInterface* MLuaIO_first_interface ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaIO*)base)->ILuaIO_i);
}


su::IInterface* MLuaIO_get_interface ( void* base, su::classid cid )
{
	SU_REQUIRE_OR_NULL( base );
	return ((MLuaIO*)base)->GetInterface(cid);
}


uint MLuaIO_count_switch ( )
{
	return 34;
}


bool MLuaIO_enum_switch ( uint i, su::ISwitch::Desc& desc )
{
	static su::ISwitch::Desc swdesc[] = {
		{ "isExists", "Lua_isExists", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isEmpty", "Lua_isEmpty", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isDirectory", "Lua_isDirectory", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isFile", "Lua_isFile", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isReadOnly", "Lua_isReadOnly", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isHidden", "Lua_isHidden", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isSystem", "Lua_isSystem", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "isFullname", "Lua_isFullname", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "findFile", "Lua_findFile", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "listDirectory", "Lua_listDirectory", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "splitExtension", "Lua_splitExtension", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "hasExtension", "Lua_hasExtension", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getExtension", "Lua_getExtension", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getSize", "Lua_getSize", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "glob", "Lua_glob", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getDirname", "Lua_getDirname", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getBasename", "Lua_getBasename", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getFullname", "Lua_getFullname", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getNormalized", "Lua_getNormalized", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getHostPath", "Lua_getHostPath", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "getVirtualPath", "Lua_getVirtualPath", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "hashContent", "Lua_hashContent", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "removeFile", "Lua_removeFile", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "removeDir", "Lua_removeDir", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "parseStream", "Lua_parseStream", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "loadStream", "Lua_loadStream", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "presentStream", "Lua_presentStream", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "dumpStream", "Lua_dumpStream", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "loadBinary", "Lua_loadBinary", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "dumpBinary", "Lua_dumpBinary", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "mount", "Lua_mount", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "unmount", "Lua_unmount", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "unmountAll", "Lua_unmountAll", "int,lua_State*", "wp", "ILuaIO", NULL },
		{ "listMount", "Lua_listMount", "int,lua_State*", "wp", "ILuaIO", NULL },
		};
	SU_REQUIRE_OR_FALSE( i<34 );
	desc = swdesc[i];
	return true;
}


int MLuaIO_find_switch ( pcstr inname=NULL )
{
	SU_REQUIRE_OR_NEG( inname && inname[0] );
	for( uint i=0 ; i<34 ; i++ ) {
		su::ISwitch::Desc d; MLuaIO_enum_switch(i,d);
		if( util::Strequals(inname,d.name,false) )
			return i;
		}
	return -1;
}


bool MLuaIO_call_switch_stack ( void* base, uint i, void* r, va_list args )
{
	SU_REQUIRE_OR_FALSE( base );
	SU_REQUIRE_OR_FALSE( i<34 );
	if( i==0 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isExists(p0);
		return true;
	}
	if( i==1 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isEmpty(p0);
		return true;
	}
	if( i==2 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isDirectory(p0);
		return true;
	}
	if( i==3 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isFile(p0);
		return true;
	}
	if( i==4 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isReadOnly(p0);
		return true;
	}
	if( i==5 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isHidden(p0);
		return true;
	}
	if( i==6 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isSystem(p0);
		return true;
	}
	if( i==7 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_isFullname(p0);
		return true;
	}
	if( i==8 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_findFile(p0);
		return true;
	}
	if( i==9 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_listDirectory(p0);
		return true;
	}
	if( i==10 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_splitExtension(p0);
		return true;
	}
	if( i==11 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_hasExtension(p0);
		return true;
	}
	if( i==12 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getExtension(p0);
		return true;
	}
	if( i==13 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getSize(p0);
		return true;
	}
	if( i==14 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_glob(p0);
		return true;
	}
	if( i==15 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getDirname(p0);
		return true;
	}
	if( i==16 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getBasename(p0);
		return true;
	}
	if( i==17 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getFullname(p0);
		return true;
	}
	if( i==18 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getNormalized(p0);
		return true;
	}
	if( i==19 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getHostPath(p0);
		return true;
	}
	if( i==20 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_getVirtualPath(p0);
		return true;
	}
	if( i==21 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_hashContent(p0);
		return true;
	}
	if( i==22 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_removeFile(p0);
		return true;
	}
	if( i==23 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_removeDir(p0);
		return true;
	}
	if( i==24 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_parseStream(p0);
		return true;
	}
	if( i==25 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_loadStream(p0);
		return true;
	}
	if( i==26 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_presentStream(p0);
		return true;
	}
	if( i==27 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_dumpStream(p0);
		return true;
	}
	if( i==28 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_loadBinary(p0);
		return true;
	}
	if( i==29 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_dumpBinary(p0);
		return true;
	}
	if( i==30 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_mount(p0);
		return true;
	}
	if( i==31 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_unmount(p0);
		return true;
	}
	if( i==32 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_unmountAll(p0);
		return true;
	}
	if( i==33 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaIO*)base)->ILuaIO_i.Lua_listMount(p0);
		return true;
	}
	return false;
}


bool MLuaIO_call_switch_mem ( void* base, uint i, Any* r, int argc, Any* argv )
{
	SU_REQUIRE_OR_FALSE( base );
	SU_REQUIRE_OR_FALSE( i<34 );
	if( i==0 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isExists(p0) );
		return true;
	}
	if( i==1 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isEmpty(p0) );
		return true;
	}
	if( i==2 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isDirectory(p0) );
		return true;
	}
	if( i==3 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isFile(p0) );
		return true;
	}
	if( i==4 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isReadOnly(p0) );
		return true;
	}
	if( i==5 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isHidden(p0) );
		return true;
	}
	if( i==6 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isSystem(p0) );
		return true;
	}
	if( i==7 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_isFullname(p0) );
		return true;
	}
	if( i==8 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_findFile(p0) );
		return true;
	}
	if( i==9 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_listDirectory(p0) );
		return true;
	}
	if( i==10 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_splitExtension(p0) );
		return true;
	}
	if( i==11 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_hasExtension(p0) );
		return true;
	}
	if( i==12 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getExtension(p0) );
		return true;
	}
	if( i==13 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getSize(p0) );
		return true;
	}
	if( i==14 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_glob(p0) );
		return true;
	}
	if( i==15 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getDirname(p0) );
		return true;
	}
	if( i==16 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getBasename(p0) );
		return true;
	}
	if( i==17 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getFullname(p0) );
		return true;
	}
	if( i==18 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getNormalized(p0) );
		return true;
	}
	if( i==19 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getHostPath(p0) );
		return true;
	}
	if( i==20 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_getVirtualPath(p0) );
		return true;
	}
	if( i==21 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_hashContent(p0) );
		return true;
	}
	if( i==22 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_removeFile(p0) );
		return true;
	}
	if( i==23 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_removeDir(p0) );
		return true;
	}
	if( i==24 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_parseStream(p0) );
		return true;
	}
	if( i==25 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_loadStream(p0) );
		return true;
	}
	if( i==26 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_presentStream(p0) );
		return true;
	}
	if( i==27 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_dumpStream(p0) );
		return true;
	}
	if( i==28 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_loadBinary(p0) );
		return true;
	}
	if( i==29 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_dumpBinary(p0) );
		return true;
	}
	if( i==30 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_mount(p0) );
		return true;
	}
	if( i==31 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_unmount(p0) );
		return true;
	}
	if( i==32 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_unmountAll(p0) );
		return true;
	}
	if( i==33 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaIO*)base)->ILuaIO_i.Lua_listMount(p0) );
		return true;
	}
	return false;
}


}


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.

