/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


//==== includes ====================================================================================

#include <sufw/precompiled/supch_core.h>
#include "..\..\core\base\su_iinterface.h"
#include "su_iluastate.h"
#include "..\..\core\base\su_iswitch.h"
#include <stdarg.h>




//==== defines =====================================================================================

#ifndef SIDL_IMPL_CLASSNAME
#define SIDL_IMPL_CLASSNAME MLuaState
#endif

#ifndef SIDL_IMPL_MUID
#define SIDL_IMPL_MUID 0x90eadfd3u
#endif

#ifndef SIDL_IMPL_SWITCHED
#define SIDL_IMPL_SWITCHED 
#endif

#ifndef SIDL_IMPL_REVISION
#define SIDL_IMPL_REVISION 0
#endif

#ifndef SIDL_IMPL_PACKAGE
#define SIDL_IMPL_PACKAGE "su.fw.lang"
#endif

#ifndef SIDL_IMPL_ATTR_V
#define SIDL_IMPL_ATTR_V NULL
#endif

#ifndef SIDL_IMPL_ATTR_C
#define SIDL_IMPL_ATTR_C 0
#endif

#ifndef SIDL_STUB_CLASSNAME
#define SIDL_STUB_CLASSNAME MLuaState_Stub
#endif

#ifndef SIDL_IMPL_INTERFACE
#define SIDL_IMPL_INTERFACE(I) ((I*)MLuaState_get_interface(MLuaState_stub_to_base(this),I::ClassId))
#endif


//==== declarations ================================================================================

namespace {

su::IInterface* MLuaState_create_object( su::Pool*, su::Pool*, su::AnyList* );
void* MLuaState_base_to_stub ( void* );
void* MLuaState_stub_to_base ( void* );
su::addin::Builder* MLuaState_builder ( );
uint MLuaState_count_interface ( );
bool MLuaState_enum_interface ( uint, su::classid*, pcstr* );
su::IInterface* MLuaState_first_interface ( void* );
su::IInterface* MLuaState_get_interface ( void*, su::classid );
uint MLuaState_count_switch ( );
bool MLuaState_enum_switch ( uint, su::ISwitch::Desc& );
int MLuaState_find_switch ( pcstr );
bool MLuaState_call_switch_stack ( void*, uint, void*, va_list );
bool MLuaState_call_switch_mem ( void*, uint, su::Any*, int, su::Any* );

}


//==== stub area ===================================================================================

#undef  SIDL_PROPER
#undef  SIDL_STUB
#undef  SIDL_BUILDER
#undef  SIDL_CODE
#define SIDL_STUB
#include "su_mluastate_stub.h"




//==== skeleton ====================================================================================

namespace {


struct MLuaState
{

//---- bridges -------------------------------------------------------------------------------------

struct ILuaState_t : public su::ILuaState {
	// from IInterface
	::su::classbase         GetBase            (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder         (  ) { return MLuaState_builder(); }
	void                    Retain             (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); (*m).Retain(); }
	::uint                  CountRef           (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (*m).CountRef(); }
	void                    Release            (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); (*m).Release(); }
	::uint                  CountInterface     (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface      ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface       ( ::su::classid p0 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (*m).GetInterface(p0); }
	// from ILuaState
	bool                    Realize            ( bool p0,Pool* p1 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).Realize(p0,p1); }
	bool                    IsRealized         (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).IsRealized(); }
	void                    Unrealize          (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); (m->stub).Unrealize(); }
	lua_State*              GetState           (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).GetState(); }
	Pool*                   GetStatePool       (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).GetStatePool(); }
	void                    GarbageCollect     (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); (m->stub).GarbageCollect(); }
	bool                    RunTask            ( Chunk& p0,Error* p1 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).RunTask(p0,p1); }
	int                     StartCoroutine     ( Chunk& p0,Error* p1 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).StartCoroutine(p0,p1); }
	Status                  GetCoroutineStatus ( int p0 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).GetCoroutineStatus(p0); }
	bool                    ResumeCoroutine    ( int p0,Error* p1 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); return (m->stub).ResumeCoroutine(p0,p1); }
	void                    RecycleCoroutine   ( int p0 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ILuaState_i,this); (m->stub).RecycleCoroutine(p0); }
} ILuaState_i;


struct ISwitch_t : public su::ISwitch {
	// from IInterface
	::su::classbase         GetBase        (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder     (  ) { return MLuaState_builder(); }
	void                    Retain         (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); (*m).Retain(); }
	::uint                  CountRef       (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return (*m).CountRef(); }
	void                    Release        (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); (*m).Release(); }
	::uint                  CountInterface (  ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface  ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface   ( ::su::classid p0 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return (*m).GetInterface(p0); }
	// from ISwitch
	::uint                  CountSwitch    (  ) { return MLuaState_count_switch(); }
	bool                    EnumSwitch     ( ::uint p0,::su::ISwitch::Desc & p1 ) { return MLuaState_enum_switch(p0,p1); }
	int                     FindSwitch     ( ::pcstr p0 ) { return MLuaState_find_switch(p0); }
	bool                    CallSwitch     ( ::uint p0,void * p1,... ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); va_list vl; va_start(vl,p1); return MLuaState_call_switch_stack(m,p0,p1,vl); va_end(vl); }
	bool                    CallSwitchMem  ( ::uint p0,::su::Any * p1,int p2,::su::Any * p3 ) { MLuaState* m = SU_DELEGATE_BASEPTR(MLuaState,ISwitch_i,this); return MLuaState_call_switch_mem(m,p0,p1,p2,p3); }
} ISwitch_i;


//---- stub nested object --------------------------------------------------------------------------

MLuaState_Stub stub;


//---- skeleton management code area ---------------------------------------------------------------

int refcount;
Pool* nestp;


void Retain ( )
{
	refcount++;
}


uint CountRef ( )
{
	return refcount;
}


void Release ( )
{
	if( refcount==1 )
		Destroy( this );
	else
		refcount--;
}


uint CountInterface ( )
{
	return MLuaState_count_interface();
}


bool EnumInterface ( uint i, su::classid* cid, pcstr* cname )
{
	return MLuaState_enum_interface(i,cid,cname);
}


su::IInterface* GetInterface ( classid cid )
{
	SU_IMPLEMENTS_MEMBER( ILuaState_i, cid );
	SU_IMPLEMENTS_MEMBER( ISwitch_i, cid );
	return NULL;
}


static MLuaState* Create( Pool* np, Pool* dp, AnyList* o )
{
	if( !np )	return NULL;
	MLuaState* m = np->New<MLuaState>();
	if( !m )	return NULL;
	m->refcount = 1;
	m->nestp = np;
	if( !m->stub.Init(dp,o) )
	{
		np->Delete( m );
		return NULL;
	}
	return m;
}


static void Destroy( MLuaState* m )
{
	m->stub.Shut();
	m->refcount=0;
	m->nestp->Delete( m );
}

};

}




//==== builder =====================================================================================


SU_BEGIN_BUILDER( MLuaState )

su::classid GetMUID ( ) { return SIDL_IMPL_MUID; }
pcstr GetMClassname ( ) { return "MLuaState"; }
uint32 GetRevision ( ) { return SIDL_IMPL_REVISION; }
pcstr GetPackage ( ) { return SIDL_IMPL_PACKAGE; }
uint CountInterface ( ) { return MLuaState_count_interface(); }
bool EnumInterface ( uint i, su::classid* cid, pcstr* cname ) { return MLuaState_enum_interface(i,cid,cname); }
su::IInterface* FirstInterface ( void* base ) { return MLuaState_first_interface(base); }
su::IInterface* GetInterface ( void* base, su::classid cid ) { return MLuaState_get_interface(base,cid); }
su::IInterface* CreateObject( su::Pool* nestp, su::Pool* datap, su::AnyList* opts ) { return MLuaState_create_object(nestp,datap,opts); }
void* BaseToStub ( void* base ) { return MLuaState_base_to_stub(base); }
void* StubToBase ( void* base ) { return MLuaState_stub_to_base(base); }
uint CountSwitch ( ) { return MLuaState_count_switch(); }
bool EnumSwitch ( uint i, su::ISwitch::Desc& desc ) { return MLuaState_enum_switch(i,desc); }

SU_END_BUILDER( MLuaState )




//==== definitions =================================================================================


namespace {


su::IInterface* MLuaState_create_object( su::Pool* nestp, su::Pool* datap, su::AnyList* opts )
{
	MLuaState* m = MLuaState::Create( nestp, datap, opts );
	SU_REQUIRE_OR_NULL( m );
	return &m->ILuaState_i;
}


void* MLuaState_base_to_stub ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaState*)base)->stub);
}


void* MLuaState_stub_to_base ( void* stubp )
{
	SU_REQUIRE_OR_NULL( stubp );
	return SU_DELEGATE_BASEPTR(MLuaState,stub,stubp);
}


su::addin::Builder* MLuaState_builder ( )
{
	return &_builder_MLuaState;
}


uint MLuaState_count_interface ( )
{
	return 2;
}


bool MLuaState_enum_interface ( uint i, su::classid* cid, pcstr* cname )
{
	static const su::classid cids[] = { su::ILuaState::ClassId, su::ISwitch::ClassId };
	static const pcstr cnames[] = { "ILuaState", "ISwitch" };
	SU_REQUIRE_OR_FALSE( i<2 );
	if( cid )   *cid   = cids[i];
	if( cname ) *cname = cnames[i];
	return true;
}


su::IInterface* MLuaState_first_interface ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaState*)base)->ILuaState_i);
}


su::IInterface* MLuaState_get_interface ( void* base, su::classid cid )
{
	SU_REQUIRE_OR_NULL( base );
	return ((MLuaState*)base)->GetInterface(cid);
}


uint MLuaState_count_switch ( )
{
	return 0;
}


bool MLuaState_enum_switch ( uint i, su::ISwitch::Desc& desc )
{
	return false;
}


int MLuaState_find_switch ( pcstr inname=NULL )
{
	return -1;
}


bool MLuaState_call_switch_stack ( void* base, uint i, void* r, va_list args )
{
	return false;
}


bool MLuaState_call_switch_mem ( void* base, uint i, Any* r, int argc, Any* argv )
{
	return false;
}


}


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.

