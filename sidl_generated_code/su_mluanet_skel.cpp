/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


//==== includes ====================================================================================

#include <sufw/precompiled/supch_core.h>
#include "..\..\core\base\su_iinterface.h"
#include "su_iluanet.h"
#include "..\..\core\base\su_iswitch.h"
#include <stdarg.h>




//==== defines =====================================================================================

#ifndef SIDL_IMPL_CLASSNAME
#define SIDL_IMPL_CLASSNAME MLuaNet
#endif

#ifndef SIDL_IMPL_MUID
#define SIDL_IMPL_MUID 0x887df054u
#endif

#ifndef SIDL_IMPL_QUALIFIER
#define SIDL_IMPL_QUALIFIER static
#endif

#ifndef SIDL_IMPL_IS_STATIC
#define SIDL_IMPL_IS_STATIC 
#endif

#ifndef SIDL_IMPL_SWITCHED
#define SIDL_IMPL_SWITCHED 
#endif

#ifndef SIDL_IMPL_REVISION
#define SIDL_IMPL_REVISION 0
#endif

#ifndef SIDL_IMPL_PACKAGE
#define SIDL_IMPL_PACKAGE "su.fw.lang"
#endif

#ifndef SIDL_IMPL_ATTR_V
#define SIDL_IMPL_ATTR_V NULL
#endif

#ifndef SIDL_IMPL_ATTR_C
#define SIDL_IMPL_ATTR_C 0
#endif

#ifndef SIDL_STUB_CLASSNAME
#define SIDL_STUB_CLASSNAME MLuaNet_Stub
#endif

#ifndef SIDL_IMPL_INTERFACE
#define SIDL_IMPL_INTERFACE(I) ((I*)MLuaNet_get_interface(MLuaNet_stub_to_base(this),I::ClassId))
#endif


//==== declarations ================================================================================

namespace {

su::IInterface* MLuaNet_create_object( su::Pool*, su::Pool*, su::AnyList* );
void* MLuaNet_base_to_stub ( void* );
void* MLuaNet_stub_to_base ( void* );
su::addin::Builder* MLuaNet_builder ( );
uint MLuaNet_count_interface ( );
bool MLuaNet_enum_interface ( uint, su::classid*, pcstr* );
su::IInterface* MLuaNet_first_interface ( void* );
su::IInterface* MLuaNet_get_interface ( void*, su::classid );
uint MLuaNet_count_switch ( );
bool MLuaNet_enum_switch ( uint, su::ISwitch::Desc& );
int MLuaNet_find_switch ( pcstr );
bool MLuaNet_call_switch_stack ( void*, uint, void*, va_list );
bool MLuaNet_call_switch_mem ( void*, uint, su::Any*, int, su::Any* );

}


//==== stub area ===================================================================================

#undef  SIDL_PROPER
#undef  SIDL_STUB
#undef  SIDL_BUILDER
#undef  SIDL_CODE
#define SIDL_STUB
#include "su_mluanet_stub.h"




//==== skeleton ====================================================================================

namespace {


struct MLuaNet
{

//---- bridges -------------------------------------------------------------------------------------

struct ILuaNet_t : public su::ILuaNet {
	// from IInterface
	::su::classbase         GetBase           (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder        (  ) { return MLuaNet_builder(); }
	void                    Retain            (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); (*m).Retain(); }
	::uint                  CountRef          (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (*m).CountRef(); }
	void                    Release           (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); (*m).Release(); }
	::uint                  CountInterface    (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface     ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface      ( ::su::classid p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (*m).GetInterface(p0); }
	// from ILuaNet
	int                     Lua_decomposeUrl  ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).Lua_decomposeUrl(p0); }
	int                     Lua_newConnection ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).Lua_newConnection(p0); }
	int                     LuaCo_setopt      ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_setopt(p0); }
	int                     LuaCo_getopt      ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_getopt(p0); }
	int                     LuaCo_delopt      ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_delopt(p0); }
	int                     LuaCo_getstate    ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_getstate(p0); }
	int                     LuaCo_connect     ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_connect(p0); }
	int                     LuaCo_disconnect  ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_disconnect(p0); }
	int                     LuaCo_receive     ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_receive(p0); }
	int                     LuaCo_send        ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_send(p0); }
	int                     LuaCo_perform     ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_perform(p0); }
	int                     LuaCo_gc          ( lua_State* p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ILuaNet_i,this); return (m->stub).LuaCo_gc(p0); }
} ILuaNet_i;


struct ISwitch_t : public su::ISwitch {
	// from IInterface
	::su::classbase         GetBase        (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return &(*m); }
	::su::addin::Builder *  GetBuilder     (  ) { return MLuaNet_builder(); }
	void                    Retain         (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); (*m).Retain(); }
	::uint                  CountRef       (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return (*m).CountRef(); }
	void                    Release        (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); (*m).Release(); }
	::uint                  CountInterface (  ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return (*m).CountInterface(); }
	bool                    EnumInterface  ( ::uint p0,::su::classid * p1,::pcstr * p2 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return (*m).EnumInterface(p0,p1,p2); }
	::su::IInterface *      GetInterface   ( ::su::classid p0 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return (*m).GetInterface(p0); }
	// from ISwitch
	::uint                  CountSwitch    (  ) { return MLuaNet_count_switch(); }
	bool                    EnumSwitch     ( ::uint p0,::su::ISwitch::Desc & p1 ) { return MLuaNet_enum_switch(p0,p1); }
	int                     FindSwitch     ( ::pcstr p0 ) { return MLuaNet_find_switch(p0); }
	bool                    CallSwitch     ( ::uint p0,void * p1,... ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); va_list vl; va_start(vl,p1); return MLuaNet_call_switch_stack(m,p0,p1,vl); va_end(vl); }
	bool                    CallSwitchMem  ( ::uint p0,::su::Any * p1,int p2,::su::Any * p3 ) { MLuaNet* m = SU_DELEGATE_BASEPTR(MLuaNet,ISwitch_i,this); return MLuaNet_call_switch_mem(m,p0,p1,p2,p3); }
} ISwitch_i;


//---- stub nested object --------------------------------------------------------------------------

MLuaNet_Stub stub;


//---- skeleton management code area ---------------------------------------------------------------

int refcount;


void Retain ( )
{
	refcount++;
}


uint CountRef ( )
{
	return refcount;
}


void Release ( )
{
	if( refcount==1 )
		Destroy( this );
	else
		refcount--;
}


uint CountInterface ( )
{
	return MLuaNet_count_interface();
}


bool EnumInterface ( uint i, su::classid* cid, pcstr* cname )
{
	return MLuaNet_enum_interface(i,cid,cname);
}


su::IInterface* GetInterface ( classid cid )
{
	SU_IMPLEMENTS_MEMBER( ILuaNet_i, cid );
	SU_IMPLEMENTS_MEMBER( ISwitch_i, cid );
	return NULL;
}


static MLuaNet* Create( Pool* np, Pool* dp, AnyList* o )
{
	static MLuaNet m;
	static bool yet = false;
	if( !yet )
	{
		m.refcount = 0;
		yet = true;
	}
	if( m.refcount==0 )
	{
		if( !m.stub.Init(dp,o) )
			return NULL;
	}
	m.refcount += 1;
	return &m;
}


static void Destroy( MLuaNet* m )
{
	m->stub.Shut();
	m->refcount=0;
}

};

}




//==== builder =====================================================================================


SU_BEGIN_BUILDER( MLuaNet )

su::classid GetMUID ( ) { return SIDL_IMPL_MUID; }
pcstr GetMClassname ( ) { return "MLuaNet"; }
uint32 GetRevision ( ) { return SIDL_IMPL_REVISION; }
pcstr GetPackage ( ) { return SIDL_IMPL_PACKAGE; }
uint CountInterface ( ) { return MLuaNet_count_interface(); }
bool EnumInterface ( uint i, su::classid* cid, pcstr* cname ) { return MLuaNet_enum_interface(i,cid,cname); }
su::IInterface* FirstInterface ( void* base ) { return MLuaNet_first_interface(base); }
su::IInterface* GetInterface ( void* base, su::classid cid ) { return MLuaNet_get_interface(base,cid); }
su::IInterface* CreateObject( su::Pool* nestp, su::Pool* datap, su::AnyList* opts ) { return MLuaNet_create_object(nestp,datap,opts); }
void* BaseToStub ( void* base ) { return MLuaNet_base_to_stub(base); }
void* StubToBase ( void* base ) { return MLuaNet_stub_to_base(base); }
uint CountSwitch ( ) { return MLuaNet_count_switch(); }
bool EnumSwitch ( uint i, su::ISwitch::Desc& desc ) { return MLuaNet_enum_switch(i,desc); }

SU_END_BUILDER( MLuaNet )




//==== definitions =================================================================================


namespace {


su::IInterface* MLuaNet_create_object( su::Pool* nestp, su::Pool* datap, su::AnyList* opts )
{
	MLuaNet* m = MLuaNet::Create( nestp, datap, opts );
	SU_REQUIRE_OR_NULL( m );
	return &m->ILuaNet_i;
}


void* MLuaNet_base_to_stub ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaNet*)base)->stub);
}


void* MLuaNet_stub_to_base ( void* stubp )
{
	SU_REQUIRE_OR_NULL( stubp );
	return SU_DELEGATE_BASEPTR(MLuaNet,stub,stubp);
}


su::addin::Builder* MLuaNet_builder ( )
{
	return &_builder_MLuaNet;
}


uint MLuaNet_count_interface ( )
{
	return 2;
}


bool MLuaNet_enum_interface ( uint i, su::classid* cid, pcstr* cname )
{
	static const su::classid cids[] = { su::ILuaNet::ClassId, su::ISwitch::ClassId };
	static const pcstr cnames[] = { "ILuaNet", "ISwitch" };
	SU_REQUIRE_OR_FALSE( i<2 );
	if( cid )   *cid   = cids[i];
	if( cname ) *cname = cnames[i];
	return true;
}


su::IInterface* MLuaNet_first_interface ( void* base )
{
	SU_REQUIRE_OR_NULL( base );
	return &(((MLuaNet*)base)->ILuaNet_i);
}


su::IInterface* MLuaNet_get_interface ( void* base, su::classid cid )
{
	SU_REQUIRE_OR_NULL( base );
	return ((MLuaNet*)base)->GetInterface(cid);
}


uint MLuaNet_count_switch ( )
{
	return 12;
}


bool MLuaNet_enum_switch ( uint i, su::ISwitch::Desc& desc )
{
	static su::ISwitch::Desc swdesc[] = {
		{ "decomposeUrl", "Lua_decomposeUrl", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "newConnection", "Lua_newConnection", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "setopt", "LuaCo_setopt", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "getopt", "LuaCo_getopt", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "delopt", "LuaCo_delopt", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "getstate", "LuaCo_getstate", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "connect", "LuaCo_connect", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "disconnect", "LuaCo_disconnect", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "receive", "LuaCo_receive", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "send", "LuaCo_send", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "perform", "LuaCo_perform", "int,lua_State*", "wp", "ILuaNet", NULL },
		{ "gc", "LuaCo_gc", "int,lua_State*", "wp", "ILuaNet", NULL },
		};
	SU_REQUIRE_OR_FALSE( i<12 );
	desc = swdesc[i];
	return true;
}


int MLuaNet_find_switch ( pcstr inname=NULL )
{
	SU_REQUIRE_OR_NEG( inname && inname[0] );
	for( uint i=0 ; i<12 ; i++ ) {
		su::ISwitch::Desc d; MLuaNet_enum_switch(i,d);
		if( util::Strequals(inname,d.name,false) )
			return i;
		}
	return -1;
}


bool MLuaNet_call_switch_stack ( void* base, uint i, void* r, va_list args )
{
	SU_REQUIRE_OR_FALSE( base );
	SU_REQUIRE_OR_FALSE( i<12 );
	if( i==0 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.Lua_decomposeUrl(p0);
		return true;
	}
	if( i==1 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.Lua_newConnection(p0);
		return true;
	}
	if( i==2 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_setopt(p0);
		return true;
	}
	if( i==3 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_getopt(p0);
		return true;
	}
	if( i==4 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_delopt(p0);
		return true;
	}
	if( i==5 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_getstate(p0);
		return true;
	}
	if( i==6 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_connect(p0);
		return true;
	}
	if( i==7 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_disconnect(p0);
		return true;
	}
	if( i==8 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_receive(p0);
		return true;
	}
	if( i==9 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_send(p0);
		return true;
	}
	if( i==10 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_perform(p0);
		return true;
	}
	if( i==11 ) {
		SU_ASSERT( r );
		lua_State* p0 = va_arg(args,lua_State*);
		*((int*)r) = ((MLuaNet*)base)->ILuaNet_i.LuaCo_gc(p0);
		return true;
	}
	return false;
}


bool MLuaNet_call_switch_mem ( void* base, uint i, Any* r, int argc, Any* argv )
{
	SU_REQUIRE_OR_FALSE( base );
	SU_REQUIRE_OR_FALSE( i<12 );
	if( i==0 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.Lua_decomposeUrl(p0) );
		return true;
	}
	if( i==1 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.Lua_newConnection(p0) );
		return true;
	}
	if( i==2 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_setopt(p0) );
		return true;
	}
	if( i==3 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_getopt(p0) );
		return true;
	}
	if( i==4 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_delopt(p0) );
		return true;
	}
	if( i==5 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_getstate(p0) );
		return true;
	}
	if( i==6 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_connect(p0) );
		return true;
	}
	if( i==7 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_disconnect(p0) );
		return true;
	}
	if( i==8 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_receive(p0) );
		return true;
	}
	if( i==9 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_send(p0) );
		return true;
	}
	if( i==10 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_perform(p0) );
		return true;
	}
	if( i==11 ) {
		SU_ASSERT( argc==1 && argv )
		SU_ASSERT( r )
		lua_State* p0 = (lua_State*)argv[0].asPointer();
		r->set( ((MLuaNet*)base)->ILuaNet_i.LuaCo_gc(p0) );
		return true;
	}
	return false;
}


}


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.

