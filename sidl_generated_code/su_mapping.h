/*LIC-HDR********************************************************************
**
** Copyright (C) 2005-2011 AtOnce Technologies
**
** This file is part of the Sugar core-system framework.
**
** This file and the associated product may be used and distributed
** under the terms of a current License as defined by AtOnce Technologies
** and appearing in the file LICENSE.TXT included in the packaging of this file.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.atonce-technologies.com or email info@atonce-technologies.com
** for informations about Sugar Framework and AtOnce Technologies others products
** License Agreements.
**
** Contact info@atonce-technologies.com if any conditions of this license
** are not clear to you.
**
*****************************************************************LIC-HDR*/


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


#ifndef _su_mapping_h_
#define _su_mapping_h_



#include <sufw/su_core.h>
#include <sufw/asset/su_idatatree.h>



namespace su { namespace map
{


	// -- declaration of elements

	struct elements
	{
		ui_attr count;
		ui_attr ids;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_count );
		int load ( byte* p );
	};


	// -- declaration of string

	struct string
	{
		ui_attr len;
		ui_attr text;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_len );
		int load ( byte* p );
	};


	// -- declaration of quat

	struct quat
	{
		fp_attr x;
		fp_attr y;
		fp_attr z;
		fp_attr w;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of vec3

	struct vec3
	{
		fp_attr x;
		fp_attr y;
		fp_attr z;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of locations

	struct locations
	{
		ui_attr count;
		fp_attr x;
		fp_attr y;
		fp_attr z;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_count );
		int load ( byte* p );
	};


	// -- declaration of element

	struct element
	{
		ui_attr id;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of matrix

	struct matrix
	{
		fp_attr coeff;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of bitmask

	struct bitmask
	{
		ui_attr size;
		ui_attr bits;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_size );
		int load ( byte* p );
	};


	// -- declaration of rscs

	struct rscs
	{
		ui_attr count;
		ui_attr ids;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_count );
		int load ( byte* p );
	};


	// -- declaration of blob

	struct blob
	{
		ui_attr size;
		ui_attr bytes;

		static const uint ALIGN = (2);

		int create ( byte* p, uint in_size );
		int load ( byte* p );
	};


	// -- declaration of vec4

	struct vec4
	{
		fp_attr x;
		fp_attr y;
		fp_attr z;
		fp_attr w;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of rsc

	struct rsc
	{
		ui_attr id;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of strings

	struct strings
	{
		ui_attr count;
		ui_attr len;
		ui_attr offsets;
		ui_attr texts;

		static const uint ALIGN = (0);

		int create ( byte* p, uint in_len );
		int load ( byte* p );
	};


	// -- declaration of box3

	struct box3
	{
		fp_attr center;
		fp_attr rotation;
		fp_attr length;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of location

	struct location
	{
		fp_attr x;
		fp_attr y;
		fp_attr z;

		static const uint ALIGN = (0);

		int create ( byte* p );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_skelframe

	struct rsc_collection_anim_skelframe : public base_tag
	{
		ui_attr freq;
		ui_attr bonecnt;
		ui_attr bonenames;
		ui_attr framecnt;
		fp_attr frames;

		static const uint ALIGN = (2);
		static const uint CODE = (136);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint bonecnt;
			uint framecnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_dxmip

	struct rsc_collection_bitmap_dxmip : public base_tag
	{
		ui_attr format;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (303);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_character

	struct rsc_collection_litem_character : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;

		static const uint ALIGN = (0);
		static const uint CODE = (127);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotpoint

	struct rsc_collection_hotpoint : public base_tag
	{
		ui_attr namecrc;
		location spot;

		static const uint ALIGN = (0);
		static const uint CODE = (112);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotspline

	struct rsc_collection_hotspline : public base_tag
	{
		ui_attr namecrc;
		location start;
		location end;
		vec3 intan;
		vec3 outan;

		static const uint ALIGN = (0);
		static const uint CODE = (115);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_light

	struct rsc_collection_litem_light : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;

		static const uint ALIGN = (0);
		static const uint CODE = (124);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_camera

	struct rsc_collection_litem_camera : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;
		fp_attr fov;
		ui_attr fovanimid;
		fp_attr targetdist;
		fp_attr envrange;

		static const uint ALIGN = (0);
		static const uint CODE = (123);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_bone

	struct rsc_collection_litem_bone : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;
		fp_attr length;

		static const uint ALIGN = (0);
		static const uint CODE = (126);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_userdata_content

	struct rsc_userdata_content : public base_tag
	{
		string label;
		string sourcefile;
		blob data;

		static const uint ALIGN = (0);
		static const uint CODE = (10);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint label_len;
			uint sourcefile_len;
			uint data_size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotsphere

	struct rsc_collection_hotsphere : public base_tag
	{
		ui_attr namecrc;
		location center;
		fp_attr radius;

		static const uint ALIGN = (0);
		static const uint CODE = (116);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_technique

	struct rsc_collection_shading_technique : public base_tag
	{
		string name;
		ui_attr namecrc;
		string note;
		ui_attr passcnt;

		static const uint ALIGN = (0);
		static const uint CODE = (406);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_s3mip

	struct rsc_collection_bitmap_s3mip : public base_tag
	{
		ui_attr format;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (306);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_skeleton

	struct rsc_collection_skeleton : public base_tag
	{
		box3 bbox;
		string note;
		ui_attr bonecnt;

		static const uint ALIGN = (0);
		static const uint CODE = (140);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_mesh_blendprocess

	struct rsc_collection_mesh_blendprocess : public base_tag
	{
		ui_attr vbidx;
		ui_attr vcount;
		ui_attr vstride;
		fp_attr vertices;
		ui_attr bcount;
		ui_attr bones;

		static const uint ALIGN = (2);
		static const uint CODE = (205);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint vcount;
			uint vstride;
			uint bcount;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_drivermip

	struct rsc_collection_bitmap_drivermip : public base_tag
	{
		ui_attr format;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (307);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_geometry

	struct rsc_collection_litem_geometry : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;
		matrix offset;
		ui_attr meshid;
		ui_attr color;

		static const uint ALIGN = (0);
		static const uint CODE = (122);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_klin_scl

	struct rsc_collection_anim_klin_scl : public base_tag
	{
		ui_attr ort;
		ui_attr samplingrate;
		ui_attr keycnt;
		fp_attr keys;

		static const uint ALIGN = (0);
		static const uint CODE = (134);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint keycnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim

	struct rsc_collection_anim : public base_tag
	{
		box3 bbox;
		fp_attr timerange;

		static const uint ORT_UNDEF = (0);
		static const uint ORT_CONSTANT = (1);
		static const uint ORT_CYCLE = (2);
		static const uint ORT_OSCILLATE = (3);
		static const uint ORT_LINEAR = (4);
		static const uint ORT_REL_CYCLE = (5);
		static const uint ALIGN = (0);
		static const uint CODE = (130);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_glmip

	struct rsc_collection_bitmap_glmip : public base_tag
	{
		ui_attr format;
		ui_attr type;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (304);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_klin_rot

	struct rsc_collection_anim_klin_rot : public base_tag
	{
		ui_attr ort;
		ui_attr samplingrate;
		ui_attr keycnt;
		fp_attr keys;

		static const uint ALIGN = (0);
		static const uint CODE = (133);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint keycnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_pass

	struct rsc_collection_shading_pass : public base_tag
	{
		ui_attr psidx;
		ui_attr vsidx;

		static const uint ALIGN = (0);
		static const uint CODE = (407);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_skeleton_bone

	struct rsc_collection_skeleton_bone : public base_tag
	{
		string name;
		ui_attr namecrc;
		ui_attr parentidx;
		string note;
		fp_attr pose;
		matrix tobonetr;

		static const uint ALIGN = (0);
		static const uint CODE = (141);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_morphframe

	struct rsc_collection_anim_morphframe : public base_tag
	{
		ui_attr freq;
		ui_attr targetcnt;
		ui_attr tnames;
		fp_attr tdownlim;
		fp_attr tuplim;
		ui_attr framecnt;
		fp_attr frames;

		static const uint ALIGN = (2);
		static const uint CODE = (137);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint targetcnt;
			uint framecnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_pvrmip

	struct rsc_collection_bitmap_pvrmip : public base_tag
	{
		ui_attr format;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (305);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_sourcefile

	struct rsc_collection_sourcefile : public base_tag
	{
		string filename;

		static const uint ALIGN = (0);
		static const uint CODE = (101);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint filename_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotbox

	struct rsc_collection_hotbox : public base_tag
	{
		ui_attr namecrc;
		box3 box;

		static const uint ALIGN = (0);
		static const uint CODE = (111);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_mesh_blendpass

	struct rsc_collection_mesh_blendpass : public base_tag
	{
		ui_attr arity;
		ui_attr count;
		fp_attr bw;
		ui_attr bidx;

		static const uint ALIGN = (2);
		static const uint CODE = (206);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint arity;
			uint count;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_list

	struct rsc_collection_list : public base_tag
	{
		string name;
		ui_attr count;

		static const uint ALIGN = (0);
		static const uint CODE = (120);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotsegment

	struct rsc_collection_hotsegment : public base_tag
	{
		ui_attr namecrc;
		location start;
		location end;

		static const uint ALIGN = (0);
		static const uint CODE = (113);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_hotcloud

	struct rsc_collection_hotcloud : public base_tag
	{
		ui_attr namecrc;
		locations spots;

		static const uint ALIGN = (0);
		static const uint CODE = (114);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint spots_count;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_mesh

	struct rsc_collection_mesh : public base_tag
	{
		box3 bbox;
		si_attr skeletonid;

		static const uint ALIGN = (0);
		static const uint CODE = (201);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_helper

	struct rsc_collection_litem_helper : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;
		fp_attr width;
		fp_attr height;
		fp_attr depth;

		static const uint ALIGN = (0);
		static const uint CODE = (125);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_export

	struct rsc_collection_litem_export : public base_tag
	{
		ui_attr objectid;
		string name;

		static const uint ALIGN = (0);
		static const uint CODE = (128);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_mesh_surface

	struct rsc_collection_mesh_surface : public base_tag
	{
		ui_attr vboidx;
		ui_attr effectid;
		ui_attr techniqueidx;
		string shdparams;
		elements texids;

		static const uint ALIGN = (0);
		static const uint CODE = (204);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint shdparams_len;
			uint texids_count;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_klin_float

	struct rsc_collection_anim_klin_float : public base_tag
	{
		ui_attr ort;
		ui_attr samplingrate;
		ui_attr keycnt;
		fp_attr keys;

		static const uint ALIGN = (0);
		static const uint CODE = (131);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint keycnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_effect

	struct rsc_collection_shading_effect : public base_tag
	{
		string name;
		string note;
		ui_attr techcnt;

		static const uint ALIGN = (0);
		static const uint CODE = (405);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_define

	struct rsc_collection_define : public base_tag
	{
		ui_attr id;

		static const uint ALIGN = (0);
		static const uint CODE = (100);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_note

	struct rsc_collection_anim_note : public base_tag
	{
		ui_attr keycnt;
		fp_attr keys;
		strings notes;

		static const uint ALIGN = (0);
		static const uint CODE = (135);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint keycnt;
			uint notes_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap

	struct rsc_collection_bitmap : public base_tag
	{
		ui_attr width;
		ui_attr height;
		ui_attr wpad;
		ui_attr hpad;
		ui_attr astatus;

		static const uint AS_OPAQUE = (0);
		static const uint AS_PUNCHTHROUGH = (1);
		static const uint AS_VARIED = (2);
		static const uint ALIGN = (0);
		static const uint CODE = (301);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_ps

	struct rsc_collection_shading_ps : public base_tag
	{
		blob data;

		static const uint ALIGN = (0);
		static const uint CODE = (401);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint data_size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_gs

	struct rsc_collection_shading_gs : public base_tag
	{
		blob data;

		static const uint ALIGN = (0);
		static const uint CODE = (403);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint data_size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_morph_target

	struct rsc_collection_morph_target : public base_tag
	{
		string name;
		ui_attr namecrc;
		ui_attr vtxcnt;
		ui_attr vtxidx;
		fp_attr vtxdelta;

		static const uint ALIGN = (2);
		static const uint CODE = (160);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint vtxcnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_anim_klin_loc

	struct rsc_collection_anim_klin_loc : public base_tag
	{
		ui_attr ort;
		ui_attr samplingrate;
		ui_attr keycnt;
		fp_attr keys;

		static const uint ALIGN = (0);
		static const uint CODE = (132);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint keycnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_vs

	struct rsc_collection_shading_vs : public base_tag
	{
		ui_attr usagecount;
		ui_attr usages;
		blob data;

		static const uint ALIGN = (0);
		static const uint CODE = (402);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint usagecount;
			uint data_size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_common_end

	struct rsc_common_end : public base_tag
	{
		static const uint ALIGN = (0);
		static const uint CODE = (1);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_constant

	struct rsc_collection_shading_constant : public base_tag
	{
		ui_attr namecrc;
		ui_attr cclass;
		ui_attr ctype;
		ui_attr col;
		ui_attr row;
		ui_attr elt;

		static const uint ALIGN = (0);
		static const uint CODE = (404);

		int create ( byte* p, bool forcelong=false );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_shading_rstate

	struct rsc_collection_shading_rstate : public base_tag
	{
		ui_attr regcnt;
		ui_attr registers;

		static const uint ALIGN = (0);
		static const uint CODE = (408);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint regcnt;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_bitmap_layer

	struct rsc_collection_bitmap_layer : public base_tag
	{
		string name;
		ui_attr psm;
		ui_attr size;
		ui_attr data;

		static const uint ALIGN = (2);
		static const uint CODE = (302);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_mesh_vbo

	struct rsc_collection_mesh_vbo : public base_tag
	{
		ui_attr vf;
		ui_attr primtype;
		ui_attr dynamic;
		ui_attr count;
		blob data;
		bitmask kick;

		static const uint VF_LOC2 = (1<<0);
		static const uint VF_LOC3 = (1<<1);
		static const uint VF_UV0 = (1<<2);
		static const uint VF_UV1 = (1<<3);
		static const uint VF_UV2 = (1<<4);
		static const uint VF_COL = (1<<5);
		static const uint VF_NRM = (1<<6);
		static const uint VF_TAN = (1<<7);
		static const uint VF_BIN = (1<<8);
		static const uint PRIM_POINT = (0);
		static const uint PRIM_LINE = (1);
		static const uint PRIM_TRIANGLE = (2);
		static const uint ALIGN = (0);
		static const uint CODE = (202);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint data_size;
			uint kick_size;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection_litem_node

	struct rsc_collection_litem_node : public base_tag
	{
		si_attr parentidx;
		string name;
		string note;
		ui_attr hidden;
		matrix trs;
		ui_attr trsanimid;

		static const uint ALIGN = (0);
		static const uint CODE = (121);

		struct requirements
		{
			requirements() { util::Uninitialized(*this); }
			uint name_len;
			uint note_len;
		};

		int create ( byte* p, requirements& r, bool forcelong=false, bool checkun=true );
		int load ( byte* p );
	};


	// -- declaration of rsc_collection

	struct rsc_collection : public base_map
	{
		static const uint32 CSIGN = 0x1b7d71d1u;
		static const uint32 FSIGN = 0x06910221u;
		static const uint   ALIGN = (2);
		
		int create ( byte* p );
		int load ( byte* p );
		bool writecontent( IDatatree*, context& );
		static bool matchcontent( IDatatree* );
	};


	// -- declaration of rsc_userdata

	struct rsc_userdata : public base_map
	{
		static const uint32 CSIGN = 0x3a3043eau;
		static const uint32 FSIGN = 0x5e11ff38u;
		static const uint   ALIGN = (0);
		
		int create ( byte* p );
		int load ( byte* p );
		bool writecontent( IDatatree*, context& );
		static bool matchcontent( IDatatree* );
	};


	StringId select   ( IDatatree*                                            );
	uint     binarize ( IDatatree*, byte*, context&                           );
	uint     binarize ( IDatatree*, Pool*, byte*&, context&                   );

	StringId revert   ( uint32   mapcsign                                     );
	StringId revert   ( StringId mapid, uint tagcode                          );
	bool     info     ( StringId mapid, uint& csign, uint& fsign, uint& align );


} }




#endif // _su_mapping_h_


// !! This file has been automatically generated by the sugar sidl tool.
// !! Do not edit this file manually under risk of losing your changes.


